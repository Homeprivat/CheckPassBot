<?php header('Content-type: text/html; charset=utf-8');
mb_internal_encoding("UTF-8");

require_once 'FMS/Fms.php';// –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ FMS –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
require 'HttpRequest.php';// –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä HTTP –∑–∞–ø—Ä–æ—Å–∞

/**
* –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∞–π—Ç–∞ FMS
* Class FMSOut 
*/
class FMSOut
{
	
	/**
	* –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	* params message, botToken, chat_id
	* return this 
	*/
	public function __construct($message, $botToken, $chat_id) 
	{
		
		$this->masg = preg_replace("/\s+/", "", $message);
		$this->Token = $botToken;
		$this->chatid = $chat_id;
	}
	
	

	
	/**
	* –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç—è—â–∏—Ö –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
	* params 
	* return this 
	*/
	public function PassinfoArr()
	{
		
		preg_match_all("/[0-9]{10}+/", $this->masg, $Passinf);
			foreach($Passinf as $item){
				$PassinfoArr = $item;
			}
		$this->PassInfoArry = $PassinfoArr;
	}
	
	/**
	* –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –º–∞—Å—Å–∏–≤–æ–≤ (–ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)
	* params 
	* return CountPass 
	*/
	public function isCountPass()
	{
		$CountPass =  preg_match_all("/[0-9]{10}+/", $this->masg); 
		$this->CountPass = $CountPass;
		return ($CountPass);
	}
	
	/**
	* –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ü–∏—Ñ—Ä –Ω–∞ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä
	* params 
	* return resultate 
	*/
	public function getPassCheckInfo()
	{
	
		for ($d = 0; $d <= $this->CountPass;	)
		{
			foreach($this->PassInfoArry as $value)
			{
				$series = mb_substr($value,0,4);
				$no = substr($value,strlen($series));
				$resultate[] = array(
					'series'=>$series,
					'no'=>$no
				);
				
				$d++;
			
			}
		
		$this->arrPassIn = $resultate;
			
		return($resultate);	
		
		exit;
		}

	}
	
	/**
	* –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å –∫ —Ñ–∞–π–ª—É FMS –∏ –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥—è–¥ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
	* params arrPassIn
	* return result 
	*/
	public function isFmsCheck($arrPassIn)
	{
		
		$mask = $arrPassIn;
		$i=1;
		
			foreach ($mask as $value) {
				$passport = $i++;
				$result[$passport] = [
					'passport'=>$passport,
					'series'=>$series = $value['series'],
					'nomer'=>$no = $value['no'],
					'fms'=>$fms = new Fms($series, $no),
					'status'=>$getStatus = $fms->getStatus(),
				];
				
				echo $passport;
				echo $series;
				echo $no;
				echo $status;
			
			}

		$this->FMSResponseSata = $result;
		
		return ($result);
		
		exit;
	}
	
	/**
	*	–§–∫–Ω—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ–∞–π–ª–∞ –∏ –†–∞—Å–ø–∞—Ä—Å–∏—Ä–æ–≤–∫–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
	*	 params CountPass, CountPass
	* 	@return bool
	*/
	public function isCheckPass($CountPass, $arrPassIn)
	{	
		$resmod = $CountPass;
		$isFmsCheck = $this->isFmsCheck($arrPassIn);
				echo "isFmsCheck";
				echo "<pre>";
				print_r($isFmsCheck);
				echo "</pre>";
		
		
		for ($d = 1; $d <= $this->CountPass;)
		{
			$passport = $isFmsCheck[$d]['passport'];
			$status = $isFmsCheck[$d]['status'];
			$setseries = $isFmsCheck[$d]['series'];
			$setnomer = $isFmsCheck[$d]['nomer'];
			$getpassport = strtolower($passport);
		
				echo "getstatus";
				echo "<pre>";
				print_r($status);
				echo "</pre>";
				//$this->sendMessage($status);
				$StatusCorrect = $this->PassportStatusCorrect($status);
				//	$this->sendMessage($StatusCorrect);
				$PassporForNumber = $this->ParserNumberSticker($getpassport);

				if($StatusCorrect == "YES")
				{
					$resul = "üìò –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ ‚Ññ <b>".$PassporForNumber ."</b>\n–ü–∞—Å–ø–æ—Ä—Ç  üá∑üá∫:
					—Å–µ—Ä–∏–∏ <b>".$setseries ."</b> –Ω–æ–º–µ—Ä <b>".$setnomer ."</b>\n\xF0\x9F\x86\x97 <b>–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ô</b> \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n";

				}
				if($StatusCorrect == "NO")
				{	
					$StatusError = $this->PassportParseStatusError($status);
				
					$resul = "üìò –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ ‚Ññ <b>".$PassporForNumber ."</b>\n–ü–∞—Å–ø–æ—Ä—Ç  üá∑üá∫: 
					—Å–µ—Ä–∏–∏ <b>".$setseries ."</b> –Ω–æ–º–µ—Ä <b>".$setnomer ."</b>\n<b>\xF0\x9F\x86\x98 \xF0\x9F\x86\x98 \xF0\x9F\x86\x98 –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ô</b>
					–ü—Ä–∏—á–∏–Ω–∞: <b>".$StatusError."</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n";
				}
				
				$result = $resul;	
				$Text[] = "\n".$result."";				
			$d++;
		
		}
		
		$dateformat = "d-m-Y";
		$datain = date($dateformat);
		
		$messageText  = "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –≤ –∫–æ–ª-–≤–µ:  ".$CountPass."\n";
		$messageText .= "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ –±–∞–∑–µ üóÑ –ì–£ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ú–í–î üá∑üá∫.\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –Ω–∞ üìÖ  <b>".$datain."</b> \n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è\n";
		$messageText .= implode(" ", $Text);
		$messageText .= "\nO–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –µ—â—ë! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!\n\n\n¬Æ";
		
		
		$buttonKeyboard2[] = array("‚ùî –°–ø—Ä–∞–≤–∫–∞", "üëâ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç");
		$buttonKeyboard2[] = array("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üì´");
	
		$messageTex = mb_convert_encoding($messageText, "UTF-8");
		return $this->sendMessage($messageTex, $buttonKeyboard2);
	}
	
	/**
	*	–§–∫–Ω—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–¥–º–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
	*	 params status
	* 	@return bool
	// */
	public function PassportStatusCorrect($data)
	{
		$str = mb_convert_encoding($data, "UTF-8");;
		// –ø–æ–¥—Å—Ç—Ä–æ–∫–∞
		$substr = "–Ω–µ –∑–Ω–∞—á–∏—Ç—Å—è";
		if (stristr($data, $substr) === FALSE){
			return "NO";
		}
		else
		{
		return "YES";
		}
	}	
	
	
	
	
	public function PassportParseStatusError($status)
	{	
		
		$dataStatus = $status;
		
		if(stristr($dataStatus, "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–ß–ò–°–õ–ò–¢–°–Ø –í –†–û–ó–´–°–ö–ï)¬ª")) 
		{
			return  "–ß–∏—Å–ª–∏—Ç—Å—è –≤ —Ä–æ–∑—ã—Å–∫–µ";
		} 
		
		if(stristr($dataStatus,  "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–ò–°–¢–ï–ö –°–†–û–ö –î–ï–ô–°–¢–í–ò–Ø)¬ª"))
		{
			return  "–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è";	
		}
		
		if(stristr($dataStatus,  "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ë–†–ê–ö)¬ª"))
		{
			return  "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –±—Ä–∞–∫";
		}
		
		if(stristr($dataStatus, "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–í –°–í–Ø–ó–ò –°–û –°–ú–ï–†–¢–¨–Æ –í–õ–ê–î–ï–õ–¨–¶–ê)¬ª")) 
		{
			return   "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–í —Å–≤—è–∑–∏ —Å–æ —Å–º–µ—Ä—Ç—å—é –≤–ª–∞–¥–µ–ª—å—Ü–∞";
		}
		
		if(stristr($dataStatus,  "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–ó–ê–ú–ï–ù–ï–ù –ù–ê –ù–û–í–´–ô)¬ª"))
		{
			return  "–ó–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π";
		}
		
		if(stristr($dataStatus,  "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–í–´–î–ê–ù –° –ù–ê–†–£–®–ï–ù–ò–ï–ú)¬ª")) 
		{
			return  "–í—ã–¥–∞–Ω —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º";
		}
		
		if(stristr($dataStatus,  "¬´–ù–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–ò–ó–¨–Ø–¢, –£–ù–ò–ß–¢–û–ñ–ï–ù)¬ª")) 
		{
			return  "–ò–∑—ä—è—Ç –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω!!!";
		}
		
		else
		{
			return  '–°–≤–µ–¥–µ–Ω–∏—è–º–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º';
		}
	
	}
	
	public function ParserSticker($data)
	{	
		
		$Kol_vo =  	preg_match_all("/[0-9]{1}+/", $data, $Kol_vol); 
		
		if($Kol_vo == "1")
		{
			return $this->ParserNumberSticker($data);
			
		}
		else
		{
		
			foreach($Kol_vol as $item)
			{
				$reaultKol_vo = $item;
			}
			
			$x = $Kol_vo;
			
			for($i=0; $i <= $x; $i++)
			{
				foreach($reaultKol_vo as $item2)
				{
					$respos[] = $this->ParserNumberSticker($item2[$i]);
				
				}
				
				return implode($respos);
			}
	
		}
	
	}
	
	public function ParserNumberSticker($data)
	{	
		$number =  $data;
		
		
	   if($number == '0') 
		{
			return  "\x30\xE2\x83\xA3";
		} 
		
		if($number == '1')
		{
			return  "\x31\xE2\x83\xA3";	
		}
		
		if($number == '2')
		{
			return  "\x32\xE2\x83\xA3";
		}
		
		if($number == '3') 
		{
			return   "\x33\xE2\x83\xA3 ";
		}
		
		if($number == '4')
		{
			return  "\x34\xE2\x83\xA3 ";
		}
		
		if($number == '5') 
		{
			return   "\x35\xE2\x83\xA3";
		}
		
		if($number == '6') 
		{
			return   "\x36\xE2\x83\xA3";
		}
		if($number == '7') 
		{
			return   "\x37\xE2\x83\xA3";
		}
		if($number == '8') 
		{
			return  "\x38\xE2\x83\xA3";
		}
		if($number == '9') 
		{
			return  "\x39\xE2\x83\xA3";
		}
	
	
	}
	
	public function sendMessage($messageText, $dataKeyboard = false, $reply_to = false,  $inline = false)
    {

		$chat = $this->chatid;
		if($inline)
		{
			$Keyboard = array('inline_keyboard' => $dataKeyboard);
		} 
		if($dataKeyboard)
		{
			$Keyboard = array('keyboard' => $dataKeyboard,
			'resize_keyboard' => true);
		}else
		{
			$Keyboard = array('remove_keyboard' => true);
		}
	
		$rm = json_encode($Keyboard);

		$args = array(
			'chat_id' => $chat,
			'parse_mode'=> 'HTML',
			'text' => $messageText
		);
		
		if($reply_to) $args['reply_to_message'] = $reply_to;
		if($dataKeyboard) $args['reply_markup'] = $rm;
       
		if($messageText) 
		{
			$r = new HttpRequest("post", "https://api.telegram.org/bot".$this->Token."/sendmessage", $args);
			$rr = $r->getResponse();
			$ar = json_decode($rr, true);
        }
		return($ar);
	
	}
	
	/**
	*@param $botToken
	*/
	public function sendChatAction()
	{
		$chat = $this->chat_id;
		
		$args = array(
			'chat_id' => $chat,
			'action' => 'typing' 
		);

		$r = new HttpRequest("post", "https://api.telegram.org/bot".$this->botToken."/sendChatAction", $args);
		$rr = $r->getResponse();
		$ar = json_decode($rr, true);
		
	}
}
