<?php header('Content-type: text/html; charset=utf-8');
mb_internal_encoding("UTF-8");

require_once 'FMS/Fms.php';// –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ FMS –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
require 'HttpRequest.php';// –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä HTTP –∑–∞–ø—Ä–æ—Å–∞

/**
* –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∞–π—Ç–∞ FMS
* Class FMSOut 
*/
class FMSOut
{
	
	/**
	* –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	* params message, botToken, chat_id
	* return this 
	*/
	public function __construct($message, $botToken, $chat_id) 
	{
		$this->masg = $message;
		$this->Token = $botToken;
		$this->chatid = $chat_id;
	}
	

	
	/**
	* –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç—è—â–∏—Ö –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
	* params 
	* return this 
	*/
	public function PassinfoArr()
	{
		$PassinfoArr = preg_replace("/\s/", " ", $this->masg); //—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
		$PassinfoArr =  preg_split("/[;\s]+/", $this->masg, -1, PREG_SPLIT_NO_EMPTY);
		$this->PassInfoArry = $PassinfoArr;
		
	}
	
	/**
	* –§—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ –º–∞—Å—Å–∏–≤–æ–≤ (–ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)
	* params 
	* return CountPass 
	*/
	public function isCountPass()
	{
		$CountPass =  preg_match_all("/[0-9]+/", $this->masg);
		$this->CountPass = $CountPass;
		return ($CountPass);
	}
	
	/**
	* –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ü–∏—Ñ—Ä –Ω–∞ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä
	* params 
	* return resultate 
	*/
	public function getPassCheckInfo()
	{
	
		for ($d = 0; $d <= $this->CountPass;	)
		{
			foreach($this->PassInfoArry as $value)
			{
				$series = mb_substr($value,0,4);
				$no = substr($value,strlen($series));
			
				$resultate[] = array(
					'series'=>$series,
					'no'=>$no
				);
				
				$d++;
			
			}
		
		$this->arrPassIn = $resultate;
			
		return($resultate);	
		
		exit;
		}

	}
	
	/**
	* –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å –∫ —Ñ–∞–π–ª—É FMS –∏ –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥—è–¥ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
	* params arrPassIn
	* return result 
	*/
	public function isFmsCheck($arrPassIn)
	{
		
		$mask = $arrPassIn;
		$i=1;
		
			foreach ($mask as $value) {
				$passport = $i++;
				$result[$passport] = [
				'passport'=>$passport,
				'series'=>$series = $value['series'],
				'nomer'=>$no = $value['no'],
				'fms'=>$fms = new Fms($series, $no),
				'status'=>$getStatus = $fms->getStatus(),
				];
				echo $passport;
				echo $series;
				echo $no;
				echo $status;
			
			}

		$this->FMSResponseSata = $result;
		
		return ($result);
		
		
	}
	
	/**
	*	–§–∫–Ω—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ–∞–π–ª–∞ –∏ –†–∞—Å–ø–∞—Ä—Å–∏—Ä–æ–≤–∫–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
	*	 params CountPass, CountPass
	* 	@return bool
	*/
	public function isCheckPass($CountPass, $arrPassIn)
	{	
		$resmod = $CountPass;
		
	
		$isFmsCheck = $this->isFmsCheck($arrPassIn);
				echo "isFmsCheck";
				echo "<pre>";
				print_r($isFmsCheck);
				echo "</pre>";
				
				
	
		for ($d = 1; $d <= $resmod;)
		{
			$passport = $isFmsCheck[$d]['passport'];
			$status = $isFmsCheck[$d]['status'];
			$setseries = $isFmsCheck[$d]['series'];
			$setnomer = $isFmsCheck[$d]['nomer'];
			$getpassport = strtolower($passport);
		
			echo $status;
				echo "<pre>";
				print_r($status);
				echo "</pre>";
				
				require_once 'PassportStatusFactory.php';
				$StatuFactory = new PassportStatusFactory();
				$Realtaties = $StatusFactory ->getStatus($status);
			//	$ParseErrorResponse = $StatusFactory ->getErrorStatus($status);
				
				if($Realtaties == "YES")
				{
					$resul = "‚úÖ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ ‚Ññ <b>".$getpassport ."</b>\n–ü–∞—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏–∏ <b>".$setseries ."</b> –Ω–æ–º–µ—Ä <b>".$setnomer ."</b>\n<b>–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ô</b> ‚òëÔ∏è‚òëÔ∏è‚òëÔ∏è\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n";
					
				}
				if($Realtaties == "NO")
				{			
					
					$resul = "üÜòüÜòüÜò –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥ ‚Ññ <b>".$getpassport ."</b>\n–ü–∞—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏–∏ <b>".$setseries ."</b> –Ω–æ–º–µ—Ä <b>".$setnomer ."</b>\n<b>–ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ô</b>";
				}
				
				$result = $resul;	
				$Text[] = "\n".$result."";				
			$d++;
		
		}
		
		
		$dateformat = "d-m-Y";
		$datain = date($dateformat);
		
		$messageText  = "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –≤ –∫–æ–ª-–≤–µ:  ".$CountPass."\n";
		$messageText .= "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ –±–∞–∑–µ –ì–£ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ú–í–î –†–æ—Å—Å–∏–∏.\n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –Ω–∞  <b>".$datain."</b> \n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n";
		$messageText .= implode(" ", $Text);
		$messageText .= "\nO–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –µ—â—ë! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!\n\n\n¬Æ–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–æ–º https://shopvw.pw/‚Ñ¢";
		$buttonKeyboard2[] = array("‚ùî –°–ø—Ä–∞–≤–∫–∞", "üëâ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç");
		
		$messageTex = mb_convert_encoding($messageText, "UTF-8");
		return $this->sendMessage($messageTex, $buttonKeyboard2);
		
	}
	

	
	public function sendMessage($messageText, $dataKeyboard = false, $reply_to = false)
    {

		$chat = $this->chatid;
		
		$args = array(
			'chat_id' => $chat,
			'parse_mode'=> 'HTML',
			'text' => $messageText
		);
		
		if($reply_to) $args['reply_to_message'] = $reply_to;
		if($dataKeyboard) $args['reply_markup'] = $rm;
       
		if($messageText) 
		{
			$r = new HttpRequest("post", "https://api.telegram.org/bot".$this->Token."/sendmessage", $args);
			$rr = $r->getResponse();
			$ar = json_decode($rr, true);
        }
		return($ar);
	
	}
	
	
	
	
}
